-- Fleetopia Migration: 002_core_tables_schema
-- Purpose: Core tables with strict GEOGRAPHY types and relationships

BEGIN;

-- Ensure required extensions
CREATE EXTENSION IF NOT EXISTS postgis;
CREATE EXTENSION IF NOT EXISTS moddatetime;
CREATE EXTENSION IF NOT EXISTS pgcrypto; -- for gen_random_uuid()

-- 1) profiles (1:1 with auth.users)
CREATE TABLE IF NOT EXISTS public.profiles (
  user_id uuid PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  role public.user_role NOT NULL DEFAULT 'carrier',
  full_name text,
  company_name text,
  home_base_geo geography(Point, 4326),
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now()
);

DO $$ BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'profiles_set_updated_at'
  ) THEN
    CREATE TRIGGER profiles_set_updated_at
    BEFORE UPDATE ON public.profiles
    FOR EACH ROW EXECUTE PROCEDURE moddatetime(updated_at);
  END IF;
END $$;

CREATE INDEX IF NOT EXISTS idx_profiles_home_base_geo_gist
  ON public.profiles USING GIST (home_base_geo);

-- 2) loads (posted shipments)
CREATE TABLE IF NOT EXISTS public.loads (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  created_by uuid REFERENCES public.profiles(user_id) ON DELETE SET NULL,
  title text NOT NULL,
  description text,
  pickup_location_geo geography(Point, 4326) NOT NULL,
  delivery_location_geo geography(Point, 4326) NOT NULL,
  weight_kg numeric(10,2),
  volume_m3 numeric(10,2),
  vehicle_type text,
  status public.load_status NOT NULL DEFAULT 'posted',
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now()
);

DO $$ BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'loads_set_updated_at'
  ) THEN
    CREATE TRIGGER loads_set_updated_at
    BEFORE UPDATE ON public.loads
    FOR EACH ROW EXECUTE PROCEDURE moddatetime(updated_at);
  END IF;
END $$;

CREATE INDEX IF NOT EXISTS idx_loads_pickup_geo_gist
  ON public.loads USING GIST (pickup_location_geo);

CREATE INDEX IF NOT EXISTS idx_loads_delivery_geo_gist
  ON public.loads USING GIST (delivery_location_geo);

-- 3) bids (offers for loads)
CREATE TABLE IF NOT EXISTS public.bids (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  load_id uuid NOT NULL REFERENCES public.loads(id) ON DELETE CASCADE,
  bidder_id uuid NOT NULL REFERENCES public.profiles(user_id) ON DELETE CASCADE,
  amount numeric(12,2) NOT NULL,
  currency char(3) NOT NULL DEFAULT 'EUR',
  status public.bid_status NOT NULL DEFAULT 'pending',
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now(),
  UNIQUE (load_id, bidder_id)
);

DO $$ BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'bids_set_updated_at'
  ) THEN
    CREATE TRIGGER bids_set_updated_at
    BEFORE UPDATE ON public.bids
    FOR EACH ROW EXECUTE PROCEDURE moddatetime(updated_at);
  END IF;
END $$;

-- 4) deals (accepted bids)
CREATE TABLE IF NOT EXISTS public.deals (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  load_id uuid NOT NULL REFERENCES public.loads(id) ON DELETE CASCADE,
  bid_id uuid NOT NULL REFERENCES public.bids(id) ON DELETE CASCADE,
  carrier_id uuid REFERENCES public.profiles(user_id) ON DELETE SET NULL,
  price numeric(12,2) NOT NULL,
  currency char(3) NOT NULL DEFAULT 'EUR',
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now(),
  CONSTRAINT deals_one_per_load UNIQUE (load_id)
);

DO $$ BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'deals_set_updated_at'
  ) THEN
    CREATE TRIGGER deals_set_updated_at
    BEFORE UPDATE ON public.deals
    FOR EACH ROW EXECUTE PROCEDURE moddatetime(updated_at);
  END IF;
END $$;

-- 5) chat_messages (per deal)
CREATE TABLE IF NOT EXISTS public.chat_messages (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  deal_id uuid NOT NULL REFERENCES public.deals(id) ON DELETE CASCADE,
  sender_id uuid NOT NULL REFERENCES public.profiles(user_id) ON DELETE CASCADE,
  message text NOT NULL,
  created_at timestamptz NOT NULL DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_chat_messages_deal_created_at
  ON public.chat_messages (deal_id, created_at DESC);

-- 6) geocoding_cache (store geocode results)
CREATE TABLE IF NOT EXISTS public.geocoding_cache (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  query_text text NOT NULL,
  provider text,
  lat double precision,
  lng double precision,
  geo geography(Point, 4326),
  created_at timestamptz NOT NULL DEFAULT now(),
  CONSTRAINT geocoding_cache_query_unique UNIQUE (query_text)
);

CREATE INDEX IF NOT EXISTS idx_geocoding_cache_geo_gist
  ON public.geocoding_cache USING GIST (geo);

COMMIT;


